\# exec: groff dof.1 -Tascii -man | less
\#
\# .TH cmd-name section [date [version [page-descr]]]
.TH dof 1 "19 Dec 2019" "v1.10" "User Commands"
.SH NAME
dof \- (do-for) executes commands for each item of a list
.SH SYNOPSIS
\# .SY command; .OP \-efp...; .OP \-d cs; .OP \-f fam; ...; .RI [ parameter .\|.\|. ]; .YS;
.SY dof
.OP \-efpr
.OP \-s\fR\ first..last[..step]
.OP \-l
.OP \-h
.OP \-v
.RI [item\ ...\ |\ -\ ]
.RI [ \fB\-x\fR\ ...]
.RI [ \fB\-g\fR\ ...]
.RI [ \fBdo\fR\ [\ command\ |\ -\ ] ]
.SH DESCRIPTION
\fIdof\fR executes commands for each item (file or string) of a list
.PP
.EX
	# convert all mp3s to ogg
	dof -e *.mp3 do ffmpeg -i "%f" "%b.ogg"
	
	# display colors on terminal
	dof -e -s 0..15 do 'tput setaf %f; echo colour%f; tput op;'
	
	# remove all files except *.pdf and *.tex
	dof -e * -x *.{pdf,tex} do 'rm %f'
.EE
.PP
.SH OPTIONS
.TP
.BR \-
Read from stdin.
.TP
.BR \-e
Execute; \fIdof\fR displays what commands would be run, this option executes them.
.TP
.BR \-x
Exclude list; after \fB-x\fR are following glob's patterns to exclude items from the previous list.
When the pattern is unquoted it will expanded by the shell otherwise 'glob()' will be used in each directory.
See
.BR glob (3)
.TP
.BR \-X
Exclude directories list; after \fB-X\fR are following glob's patterns to exclude directories
on recursive (\fI-r\fR) run.
When the pattern is unquoted it will expanded by the shell otherwise 'fnmatch()' will be used in each directory.
See
.BR fnmatch (3)
.TP
.BR \-g
Exclude list; after \fB-g\fR are following regex's patterns to exclude items from the previous list.
Since the \fIdof\fR parameters can be anything, this is no glob file-patterns but regex's patterns.
Example '*.c' file-pattern should be written as '.*\\.c'.
.TP
.BR \-r
Recursive execution into subdirectories. You have to be sure that you type wildcard patterns quoted,
otherwise the wildcards will expanded by the shell in the first directory.
.TP
.BR \-f
Force non-stop; \fIdof\fR stops on error (exit code != 0), this option forces \fIdof\fR to ignore them.
.TP
.BR \-p
Plain files only; directories, devices, etc are ignored.
.TP
.BR \-d
Directories only; plain-files, devices, etc are ignored.
.TP
.BR \-s\ \fIfirst\fR..\fIlast\fR[..\fIstep\fR]
Adds a sequence of numbers (float or integer).
This option can be repeated many times.
.TP
.BR \-l
Print recipes (/etc/dof.conf, ~/.dof)
.TP
.BR \-\-\fIrecipe\fR
Execute recipe (ex: dof --to-ogg)
.TP
.BR \-h
Help screen.
.TP
.BR \-v
Version and license information.
.SH VARIABLES
In the 'commands' you can use several program's variables.
Variables are recognized by prefix '%'.
Variables and its modifiers can be included inside '{}', '()', '[]' blocks or any other '\fIispunct()\fR' character block that follows the '%'.
.TP
.BR %f
The full string (or filename).
.TP
.BR %b
The basename (no directory, no extension).
.TP
.BR %d
The dirname (only the directory without the '/' suffix).
.TP
.BR %e
The extension without '.' prefix.
.TP
.BR %h
The home directory.
.TP
.BR %cwd
The current working directory.
.TP
.BR %date
The current date in YYYY-MM-DD format.
.TP
.BR %time
The current time in HH-MM-SS format.
.TP
.BR %%
The character '%'.
.TP
.BR %q
The apostrophe character (').
.PP
You can get a list of all variables with '\fI--vars\fR' option.
.SH MODIFIERS
Modifiers defined by ':' that follows a variable and modifies the result string.
You can have unlimited number of modifiers.
.TP
.BR l[{f|l|s}]\fIc\fR
Returns the left part of the string until the \fBf\fRirst or \fBl\fRast occurrence of character \fIc\fR.
The \fBs\fR uses the rest of the modifier's parameter as string to search.
.TP
.BR r[{f|l|s}]\fIc\fR
Returns the right part of the string until the \fBf\fRirst or \fBl\fRast occurrence of character \fIc\fR.
The \fBs\fR uses the rest of the modifier's parameter as string to search.
.TP
.BR t\fIab\fR
Replace all \fIa\fR characters with \fIb\fR.
.PP
.EX
	# displays the time (hour and minutes only)
	# %time = 09-15-25 (t-:) 09:15:25 (ll:) 09:15
	dof nil do %{time:t-::ll:}

	# the same by using date command
	dof "`date -R`" do '%{f:ll :rl :ll:}'
.EE
.TP
.BR s\fR/\fIp\fR/\fIr\fR/[g]
Replace regular expression match (or matches) of pattern \fIp\fR with the string \fIr\fR.
By default only the first match will replaced; use the \fBg\fR to replace all matches.
.PP
\# .TP
\# .BR %(expr)
\# string processing expression... not used yet.
.SH FILES
\fBdof\fR reads '\fI/etc/dof.conf\fR' and '\fI~/.dof\fR' files.
These files contains recipes in form 'name: parameters'.
These recipes can later executed with \fB--\fIname\fR option.
.PP
Example:
.EX
	to-ogg: *.wav *.mp3 do 'ffmpeg -i "%f" "%b.ogg" && rm "%f"'
	to-png: *.jpg *.gif do 'convert "%f" "%b.png" && rm "%f"'
.EE
.SH NOTES
.TP
Items '.' and '..' are ignored.
.SH SEE ALSO
.BR glob (3),
.BR fnmatch (3),
.BR regex (7)
.PP
.SH AUTHOR
.MT nereus@\:freemail.gr
Nicholas Christopoulos
.ME
.br
.UR https://github.com/nereusx/unix-utils
Project page:
.UE
\# EOF
